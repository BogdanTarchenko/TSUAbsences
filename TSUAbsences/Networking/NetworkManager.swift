import Foundation

enum NetworkError: LocalizedError {
    case invalidURL
    case noData
    case decodingError
    case serverError(String)
    case validationError(String)
    case unknownError
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
        case .noData:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        case .decodingError:
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        case .serverError(let message):
            return message
        case .validationError(let message):
            return message
        case .unknownError:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }
    }
}

class NetworkManager {
    static let shared = NetworkManager()
    let baseURL = "http://83.222.26.250:8080"
    
    private init() {}
    
    func request<T: Encodable, R: Decodable>(
        endpoint: String,
        method: String = "POST",
        body: T = EmptyRequest(),
        queryItems: [URLQueryItem]? = nil
    ) async throws -> R {
        var urlComponents = URLComponents(string: baseURL + endpoint)
        urlComponents?.queryItems = queryItems
        
        guard let url = urlComponents?.url else {
            throw NetworkError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = method
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        if let token = try? KeychainService.shared.loadToken() {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        
        if method != "GET" {
            let encoder = JSONEncoder()
            encoder.outputFormatting = .prettyPrinted
            request.httpBody = try encoder.encode(body)
        }
        
        if let bodyData = request.httpBody,
           let bodyString = String(data: bodyData, encoding: .utf8) {
        }
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw NetworkError.unknownError
        }
        
        if let responseString = String(data: data, encoding: .utf8) {
        }
        
        guard (200...299).contains(httpResponse.statusCode) else {
            do {
                let errorResponse = try JSONDecoder().decode(ApiErrorResponse.self, from: data)
                throw NetworkError.serverError(errorResponse.message)
            } catch DecodingError.keyNotFound(_, _),
                    DecodingError.valueNotFound(_, _),
                    DecodingError.typeMismatch(_, _),
                    DecodingError.dataCorrupted(_) {
                throw NetworkError.serverError("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)")
            } catch let error as NetworkError {
                throw error
            } catch {
                throw NetworkError.unknownError
            }
        }
        
        do {
            let decoder = JSONDecoder()
            let dateFormatter = ISO8601DateFormatter()
            dateFormatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
            decoder.dateDecodingStrategy = .custom { decoder in
                let container = try decoder.singleValueContainer()
                let dateString = try container.decode(String.self)
                
                print("üïí –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É: \(dateString)")
                
                if let date = dateFormatter.date(from: dateString) {
                    return date
                }
                
                dateFormatter.formatOptions = [.withInternetDateTime]
                if let date = dateFormatter.date(from: dateString) {
                    return date
                }
                
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: \(dateString)")
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É: \(dateString)"
                )
            }
            
            do {
                let decodedResponse = try decoder.decode(R.self, from: data)
                return decodedResponse
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:")
                print("üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \(String(data: data, encoding: .utf8) ?? "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")")
                print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error)")
                
                if let decodingError = error as? DecodingError {
                    switch decodingError {
                    case .keyNotFound(let key, let context):
                        print("üîë –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: \(key.stringValue)")
                        print("üìç –ü—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: " -> "))")
                    case .typeMismatch(let type, let context):
                        print("üìã –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞: –æ–∂–∏–¥–∞–ª—Å—è \(type)")
                        print("üìç –ü—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: " -> "))")
                    case .valueNotFound(let type, let context):
                        print("‚ùì –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: –æ–∂–∏–¥–∞–ª—Å—è \(type)")
                        print("üìç –ü—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: " -> "))")
                    case .dataCorrupted(let context):
                        print("üíæ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \(context.debugDescription)")
                    @unknown default:
                        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                    }
                }
                
                throw NetworkError.decodingError
            }
        } catch {
            print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: \(error)")
            throw error
        }
    }
}
